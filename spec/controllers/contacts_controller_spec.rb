require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ContactsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  describe "GET #index" do
    it "renders the :index template" do
      get :index
      expect(response).to render_template :index
    end

    it "assigns all contacts as @contacts" do
      contact = FactoryGirl.create(:contact)
      get :index
      expect(assigns(:contacts)).to eq([contact])
    end

    it "sucess response" do
      get :index
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "renders the :show template" do
      contact = FactoryGirl.create(:contact)
      get :show, id: contact
      expect(response).to render_template :show
    end

    it "assigns a requested contact to @contact" do
      contact = FactoryGirl.create(:contact)
      get :show, id: contact
      expect(contact).to eq(contact)
    end

     it "sucess response" do
      contact = FactoryGirl.create(:contact)
      get :show, id: contact
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "assigns a new contact as @contact" do
      get :new
      expect(assigns(:contact)).to be_a_new(Contact)
    end

    it "returns phone types defined to contact" do
      get :new
      expect(assigns(:contact).phone_numbers.map{ |p| p.phone_type }).to eq %w(home office mobile)
    end
  end

  describe "POST #create" do
    context "with valid attributes" do
      it "creates a vaild contact" do
        expect{
          post :create, contact: FactoryGirl.attributes_for(:contact)
        }.to change(Contact, :count).by(1)
      end

      it "redirects new contact" do
          post :create, contact: FactoryGirl.attributes_for(:contact)
          expect(response).to redirect_to Contact.last
      end
    end

    context "with invalid attributes" do
        it "does not save new contact" do
        expect{
          post :create, contact: FactoryGirl.attributes_for(:invalid_contact)
        }.to_not change(Contact, :count)
      end
    end
  end

  describe "PUT #update" do
    before :each do 
      @contact = FactoryGirl.create(:contact, first_name: "ABD", last_name: "Villers")
    end

    context "valid attributes" do
      it "locate contact without changes" do
        put :update, {:id => @contact.to_param, :contact => FactoryGirl.attributes_for(:contact)}
        # @contact is not equal to assigns(:contact), is this right way then?? - nithin thinks! Ohhh, Is it like `id` remains same when updating, other attrs can change isn't it.
        expect(assigns(:contact)).to eq(@contact)
      end

      it "change attributes" do 
        put :update, id: @contact.to_param, contact: FactoryGirl.attributes_for(:contact, first_name: "Kane", last_name: "Williamson")
        @contact.reload
        expect(@contact.first_name).to eq("Kane")
        expect(@contact.last_name).to eq("Williamson")
      end

      it "directs to updated contact" do
        put :update, id: @contact.to_param
        expect(response).to redirect_to(@contact)
      end
    end

    context "invalid attributes" do

       it "locate contact without changes" do
        put :update, {:id => @contact.to_param, :contact => FactoryGirl.attributes_for(:invalid_contact)}
        expect(assigns(:contact)).to eq(@contact)
      end

      it "does not chnage @contact" do
        put :update, id: @contact.to_param, contact: FactoryGirl.attributes_for(:contact, first_name: "Ce", last_name: nil)
        expect(@contact.first_name).to eq("ABD")
        # expect(@contact.last_name).to not_eq("ABD") # fix this
      end

      it "re-renders edit" do
        put :update, id: @contact.to_param, contact: FactoryGirl.attributes_for("invalid_contact")
        expect(response).to render_template("edit")
      end 
    end
  end

  describe "#destroy delete" do
    before :each do
      @contact = FactoryGirl.create(:contact)
    end

    it "deletes contact" do
      expect{
        delete :destroy, {id: @contact.to_param}
      }.to change(Contact, :count).by(-1)
    end

    it "redirects to contacts url" do
      delete :destroy, id: @contact.to_param
      expect(response).to redirect_to(contacts_path)
    end
  end


end
